import matplotlib.pyplot as plt
import numpy as np
from matplotlib.lines import Line2D
import matplotlib
from matplotlib.legend_handler import HandlerTuple
from matplotlib.ticker import MaxNLocator

# durchlaeufe x1000         # stack            # unique nodes in stack    # result length(number of paths)  # unique nodes in result # time
a='''0 0 0 0 0 0
100.0 138997 3628 31376 2743 9.700
200.0 278762 3561 63105 3709 22.411
300.0 398972 3562 89469 3898 39.965
400.0 496321 3555 125989 4113 62.824
500.0 644524 3549 160751 4200 92.340
600.0 744737 3548 202772 4201 126.318
700.0 876439 3548 247230 4296 175.266
800.0 954174 3497 284257 4312 225.769
900.0 1052536 3497 324511 4312 281.470
1000.0 1181691 3496 365097 4312 345.625
1100.0 1328414 3493 406691 4314 417.675
1200.0 1406086 3473 452815 4315 497.044
1300.0 1521770 3473 496744 4315 584.095
1400.0 1642794 3473 539583 4315 682.171
1500.0 1765355 3473 583642 4315 787.149
1600.0 1819790 3473 618655 4315 891.875
1700.0 1873741 3473 658147 4315 998.787
1800.0 1938896 3472 703599 4315 1117.507
1900.0 2024186 3472 747575 4315 1237.515
2000.0 2094497 3472 789345 4315 1365.134
2100.0 2156085 3472 828424 4315 1495.067
2200.0 2316054 3471 865417 4315 1625.565
2300.0 2451429 3471 909205 4315 1767.806
2400.0 2583481 3471 951128 4315 1921.741
2500.0 2681198 3470 997776 4315 2095.466
2600.0 2797542 3471 1043351 4316 2269.818
2700.0 2901184 3471 1091097 4316 2451.438
2800.0 2965108 3471 1125788 4316 2637.167
2900.0 3076424 3471 1170233 4316 2829.978
3000.0 3142280 3471 1205170 4316 3018.002
3100.0 3218614 3471 1242848 4316 3215.555
3200.0 3319446 3471 1289306 4316 3431.386
3300.0 3354142 3471 1320918 4316 3635.731
3400.0 3398714 3471 1362779 4316 3846.987
3500.0 3426658 3442 1402095 4316 4056.666
3600.0 3493933 3442 1444091 4316 4287.757
3700.0 3563328 3442 1493945 4316 4511.753
3800.0 3616971 3434 1537392 4316 4739.238
3900.0 3654512 3434 1582251 4316 4956.896
4000.0 3717520 3434 1619251 4316 5176.299
4100.0 3742882 3434 1650540 4316 5398.090
4200.0 3777638 3434 1679256 4316 5622.789
4300.0 3822646 3434 1721085 4316 5846.273
4400.0 3976603 3432 1763879 4316 6093.744
4500.0 4133287 3432 1805222 4316 6350.779
4600.0 4245867 3431 1849830 4316 6613.669
4700.0 4363224 3431 1893664 4316 6885.306
4800.0 4423567 3431 1928404 4316 7145.148
4900.0 4538558 3431 1972575 4316 7413.953
5000.0 4603027 3431 2007334 4316 7692.359
5100.0 4690785 3428 2048733 4316 7971.707
5200.0 4763545 3428 2088873 4316 8267.955
5300.0 4877787 3428 2131140 4316 8564.554
5400.0 4998296 3429 2174313 4317 8872.342
5500.0 5079243 3429 2212589 4317 9182.761
5600.0 5178157 3429 2257040 4317 9500.319
5700.0 5199258 3429 2289972 4317 9810.828
5800.0 5243609 3429 2330617 4317 10131.659
5900.0 5351458 3429 2368250 4317 10453.551
6000.0 5423580 3429 2408912 4317 10779.791
6100.0 5451726 3429 2445110 4317 11101.485
6200.0 5492556 3429 2484837 4317 11431.748
6300.0 5592095 3429 2525497 4317 11770.352
6400.0 5649728 3429 2568981 4317 12115.632
6500.0 5700051 3429 2599940 4317 12461.768
6600.0 5725156 3429 2634969 4317 12807.368
6700.0 5721589 3429 2680825 4317 13148.645
6800.0 5749996 3429 2720588 4317 13493.340
6900.0 5831601 3425 2762596 4317 13839.102
7000.0 5867505 3425 2809496 4317 14190.414
7100.0 5906173 3425 2854933 4317 14549.356
7200.0 5969896 3425 2890579 4317 14918.209
7300.0 5981732 3424 2933626 4317 15285.511
7400.0 6035003 3424 2976374 4317 15661.994
7500.0 6060678 3424 3008209 4317 16033.952
7600.0 6077194 3424 3043954 4317 16398.956
7700.0 6103101 3424 3079301 4317 16762.475
7800.0 6103217 3424 3119815 4317 17134.105
7900.0 6104126 3424 3155441 4317 17501.659
8000.0 6111364 3424 3197698 4317 17870.575
8100.0 6124639 3418 3234090 4317 18235.242
8200.0 6284333 3418 3273334 4317 18618.578
8300.0 6409473 3418 3315389 4317 19013.963
8400.0 6542574 3418 3358176 4317 19418.601
8500.0 6615410 3418 3397930 4317 19828.305
8600.0 6720528 3412 3435762 4317 20238.751
8700.0 6793299 3412 3475899 4317 20655.154
8800.0 6905395 3412 3518908 4317 21076.017
8900.0 6991164 3412 3558368 4317 21491.698
9000.0 7096323 3412 3601942 4317 21915.589
9100.0 7144553 3412 3632857 4317 22340.606
9200.0 7180240 3412 3675637 4317 22777.258
9300.0 7250601 3412 3710662 4317 23210.711
9400.0 7348579 3412 3757154 4317 23654.797
9500.0 7386189 3412 3788717 4317 24096.723
9600.0 7429130 3412 3830534 4317 24541.970
9700.0 7478829 3412 3870001 4317 24987.978
9800.0 7590977 3412 3912479 4317 25445.115
9900.0 7648643 3412 3945978 4317 25917.059
10000.0 7679267 3412 3987087 4317 26374.336
10100.0 7767612 3412 4024348 4317 26859.142
10200.0 7840265 3412 4064486 4317 27348.109
10300.0 7954554 3412 4107248 4317 27844.082
10400.0 8086117 3413 4148244 4318 28334.549
10500.0 8170866 3413 4184283 4318 28830.108
10600.0 8235571 3413 4230853 4318 29336.825
10700.0 8296151 3413 4265771 4318 29844.620
10800.0 8320287 3413 4297846 4318 30343.149
10900.0 8317454 3413 4347646 4318 30841.033
11000.0 8347032 3413 4383069 4318 31352.825
11100.0 8393792 3413 4422209 4318 31857.380
11200.0 8460598 3413 4464516 4318 32384.007
11300.0 8544795 3413 4507263 4318 32911.602
11400.0 8579947 3413 4533203 4318 33439.504
11500.0 8581347 3413 4580253 4318 33980.094
11600.0 8599025 3413 4620464 4318 34519.101
11700.0 8621195 3413 4663772 4318 35043.494
11800.0 8686001 3413 4709988 4318 35575.516
11900.0 8765641 3413 4752596 4318 36104.508
12000.0 8796448 3413 4797870 4318 36626.397
12100.0 8843753 3413 4827337 4318 37152.757
12200.0 8849919 3413 4862041 4318 37673.369
12300.0 8847113 3413 4911037 4318 38195.058
12400.0 8830964 3413 4964861 4318 38715.764
12500.0 8839184 3413 5006567 4318 39236.969
12600.0 8859729 3413 5052767 4318 39759.628
12700.0 9023177 3413 5093744 4318 40293.334
12800.0 9071697 3413 5137826 4318 40829.012
12900.0 9128930 3413 5176659 4318 41372.784
13000.0 9142028 3413 5218618 4318 41913.874
13100.0 9179062 3413 5247426 4318 42458.878
13200.0 9198699 3413 5280336 4318 43001.641
13300.0 9192523 3413 5334622 4318 43547.385
13400.0 9214345 3413 5366851 4318 44096.064
13500.0 9241418 3413 5402405 4318 44645.540
13600.0 9230088 3413 5449104 4318 45193.662
13700.0 9231796 3413 5489260 4318 45739.694
13800.0 9233054 3413 5538325 4318 46287.689
13900.0 9209866 3413 5594626 4318 46831.930
14000.0 9189569 3413 5650144 4318 47375.168
14100.0 9173212 3413 5703252 4318 47918.548
14200.0 9158828 3413 5755491 4318 48460.662
14300.0 9319493 3412 5794564 4318 49016.834
14400.0 9437368 3412 5838755 4318 49584.087
14500.0 9498458 3412 5873610 4318 50153.030
14600.0 9613913 3412 5917312 4318 50730.361
14700.0 9675986 3412 5952046 4318 51310.548
14800.0 9794248 3412 5995359 4318 51898.203
14900.0 9894156 3412 6031199 4318 52487.070
15000.0 9977458 3412 6076069 4318 53090.074
15100.0 10000676 3412 6110338 4318 53686.570
15200.0 10045570 3412 6149932 4318 54288.730
15300.0 10158802 3412 6187857 4318 54896.711
15400.0 10223816 3412 6227319 4318 55510.998
15500.0 10253198 3412 6264388 4318 56121.301
15600.0 10303398 3412 6304918 4318 56736.885
15700.0 10417085 3412 6347419 4318 57364.501
15800.0 10472958 3412 6383944 4318 57992.553
15900.0 10568490 3412 6422655 4318 58621.457
16000.0 10626831 3412 6467288 4318 59258.009
16100.0 10680772 3412 6500155 4318 59896.799
16200.0 10702097 3412 6533219 4318 60532.693
16300.0 10702532 3412 6581283 4318 61166.710
16400.0 10731789 3412 6618896 4318 61806.024
16500.0 10777716 3412 6659517 4318 62446.208
16600.0 10853977 3412 6701553 4318 63095.630
16700.0 10927650 3412 6739586 4318 63750.381
16800.0 10958791 3412 6769933 4318 64403.070
16900.0 10955902 3412 6819005 4318 65052.964
17000.0 10983330 3412 6856297 4318 65707.335
17100.0 11029491 3406 6896380 4318 66361.773
17200.0 11101637 3390 6933339 4318 67022.852
17300.0 11177304 3390 6978108 4318 67692.559
17400.0 11240633 3390 7013394 4318 68361.543
17500.0 11266802 3390 7045410 4318 69027.659
17600.0 11261896 3390 7095404 4318 69692.096
17700.0 11292933 3390 7131327 4318 70360.733
17800.0 11358000 3390 7170290 4318 71032.024
17900.0 11453010 3390 7215438 4318 71715.558
18000.0 11495045 3390 7246871 4318 72397.344
18100.0 11532836 3390 7289315 4318 73083.081'''
# 4,5 GB Ram


# f = a.split("\n")
# for i in f:
#     i.split(" ")
results = [i.split(" ")for i in a.split("\n")]
durchlaeufe = []
stackPaths = []
returnPaths = []
times = []
for i in results:
    durchlaeufe.append((float(i[0])*1000))
    stackPaths.append(int(i[1]))
    returnPaths.append(int(i[3]))
    times.append(float("{:.4f}".format(float(i[5])/3600)))
# print(durchlaeufe)
# print(stackPaths)
# print(returnPaths)
# print(times)



colorBlind =  ['#377eb8', '#ff7f00', '#4daf4a', '#f781bf', '#a65628', '#984ea3', '#999999', '#e41a1c', '#dede00']



fig, ax1 = plt.subplots()

plt.grid(True)

lns3 = ax1.plot(durchlaeufe,stackPaths, ':',label='Pfade in Liste',color=colorBlind[0])

lns1 = ax1.plot(durchlaeufe,returnPaths, '--',label='Gefundene Pfade',color=colorBlind[0])

ax1.set_xlabel('Anzahl der Schleifendurchl√§ufe')
ax1.set_ylabel('Anzahl der Pfade',color=colorBlind[0])

ax1.tick_params(axis='y', labelcolor=colorBlind[0])



ax2 = ax1.twinx()
lns2 = ax2.plot(durchlaeufe,times, '--',label='Laufzeit',color=colorBlind[7])
ax2.set_ylabel('Laufzeit in Stunden ',color=colorBlind[7])
ax2.tick_params(axis='y', labelcolor=colorBlind[7])

scale_x = 1000000


ax1.yaxis.set_major_locator(MaxNLocator(12)) 
ax2.yaxis.set_major_locator(MaxNLocator(9)) 
ax2.set_ylim([-1.142, 24.23])

leg = lns1 +lns3+ lns2
labs = [l.get_label() for l in leg]
ax1.legend(leg, labs, loc=2)

plt.title('Pfadberechnung ohne blockierte Knoten')

# l = ax1.get_ylim()
# l2 = ax2.get_ylim()
# f = lambda x : l2[0]+(x-l[0])/(l[1]-l[0])*(l2[1]-l2[0])
# ticks = f(ax1.get_yticks())
# ax2.yaxis.set_major_locator(matplotlib.ticker.FixedLocator(ticks))

fig.tight_layout()  # otherwise the right y-label is slightly clipped
#plt.show()
#plt.savefig("D:\\Downloads\\\OPC UA\\plots\\OhneBlockierte.pdf",bbox_inches='tight')
plt.savefig("D:\\Downloads\\\OPC UA\\plots\\OhneBlockierte.png",bbox_inches='tight', dpi=300)