import matplotlib.pyplot as plt
import numpy as np
from matplotlib.lines import Line2D
from matplotlib.legend_handler import HandlerTuple
from matplotlib.ticker import FormatStrFormatter
import matplotlib
from matplotlib.ticker import MaxNLocator

a='''0 0 0 0 0 0
0.01 45 51 2 4 0.000
0.02 69 83 4 8 0.000
0.03 93 113 6 10 0.000
0.04 89 112 11 15 0.000
0.05 127 156 11 15 0.001
0.06 217 250 11 15 0.001
0.07 249 287 16 21 0.001
0.08 261 301 24 30 0.002
0.09 261 300 33 41 0.003
0.1 266 310 38 47 0.003
0.11 264 309 44 56 0.003
0.12 281 334 46 59 0.004
0.13 299 339 48 63 0.004
0.14 307 339 53 70 0.005
0.15 327 369 53 70 0.005
0.16 346 398 53 70 0.006
0.17 346 408 53 70 0.007
0.18 343 412 56 74 0.007
0.19 333 402 66 84 0.007
0.2 323 391 76 95 0.008
0.21 313 381 86 105 0.008
0.22 303 371 96 115 0.009
0.23 295 363 105 124 0.009
0.24 355 396 107 127 0.010
0.25 360 405 113 135 0.010
0.26 751 803 116 138 0.011
0.27 785 841 117 141 0.012
0.28 783 840 119 144 0.013
0.29 778 838 124 150 0.013
0.3 768 828 134 160 0.014
0.31 772 832 143 170 0.015
0.32 762 822 153 181 0.017
0.33 752 812 163 191 0.018
0.34 832 900 164 192 0.020
0.35 823 892 173 203 0.021
0.36 813 878 183 215 0.022
0.37 809 873 190 226 0.023
0.38 808 873 196 236 0.024
0.39 808 882 204 248 0.025
0.4 798 882 214 260 0.026
0.41 823 881 220 266 0.027
0.42 848 870 226 276 0.028
0.43 838 854 236 279 0.029
0.44 828 840 246 281 0.030
0.45 818 824 256 294 0.030
0.46 808 811 266 308 0.031
0.47 798 798 276 321 0.033
0.48 788 783 286 335 0.034
0.49 778 770 296 349 0.035
0.5 768 757 306 362 0.036
0.51 758 739 316 379 0.038
0.52 748 719 326 399 0.038
0.53 808 713 330 408 0.039
0.54 817 728 332 411 0.040
0.55 807 728 342 421 0.041
0.56 797 728 352 432 0.042
0.57 872 728 352 432 0.043
0.58 865 728 359 432 0.044
0.59 855 728 369 432 0.045
0.6 845 723 379 438 0.046
0.61 839 715 388 450 0.047
0.62 865 751 388 450 0.048
0.63 885 781 388 450 0.050
0.64 910 816 388 450 0.051
0.65 930 846 388 450 0.052
0.66 951 877 388 450 0.054
0.67 975 911 388 450 0.055
0.68 1005 951 388 450 0.056
0.69 1036 992 388 450 0.058
0.7 1055 1020 389 452 0.059
0.71 1060 1034 390 453 0.061
0.72 1060 1044 390 453 0.063
0.73 1058 1050 392 457 0.064
0.74 1048 1040 402 467 0.066
0.75 1038 1030 412 477 0.068
0.76 1028 1020 422 487 0.069
0.77 1018 1010 432 497 0.070
0.78 1008 1000 442 507 0.071
0.79 998 990 452 517 0.072
0.8 988 980 462 527 0.074
0.81 978 970 472 537 0.075
0.82 968 960 482 547 0.076
0.83 958 950 492 557 0.078
0.84 948 940 502 567 0.080
0.85 938 930 512 577 0.082
0.86 928 918 522 589 0.083
0.87 918 908 532 599 0.084
0.88 908 898 542 609 0.085
0.89 898 888 552 619 0.086
0.9 888 878 562 629 0.088
0.91 878 868 572 639 0.090
0.92 868 858 582 649 0.091
0.93 858 848 592 659 0.092
0.94 848 838 602 669 0.093
0.95 838 828 612 679 0.095
0.96 828 818 622 689 0.096
0.97 818 808 632 699 0.097
0.98 808 798 642 709 0.098
0.99 798 786 652 719 0.099
1.0 793 783 660 730 0.100
1.01 787 780 667 737 0.101
1.02 800 797 668 739 0.102
1.03 802 803 672 744 0.103
1.04 827 829 672 744 0.105
1.05 832 830 672 744 0.106
1.06 832 830 672 744 0.107
1.07 825 821 679 756 0.108
1.08 815 811 689 756 0.109
1.09 811 811 693 760 0.110
1.1 807 813 697 765 0.112
1.11 803 815 701 769 0.113
1.12 798 815 706 775 0.114
1.13 793 815 711 781 0.116
1.14 788 815 716 787 0.117
1.15 783 815 721 793 0.119
1.16 778 815 726 799 0.120
1.17 773 815 731 805 0.121
1.18 808 851 738 820 0.123
1.19 804 844 746 831 0.125
1.2 872 860 746 831 0.126
1.21 887 860 746 831 0.127
1.22 878 860 755 831 0.128
1.23 868 860 765 831 0.129
1.24 933 860 768 831 0.130
1.25 936 860 772 831 0.131
1.26 926 860 782 831 0.132
1.27 919 858 790 831 0.134
1.28 933 858 790 831 0.135
1.29 923 858 800 832 0.136
1.3 913 858 810 832 0.137
1.31 928 858 810 832 0.138
1.32 919 858 819 832 0.139
1.33 909 858 829 832 0.141
1.34 908 862 832 835 0.142
1.35 903 862 839 845 0.144
1.36 905 863 844 853 0.145
1.37 914 863 846 853 0.146
1.38 904 863 856 853 0.147
1.39 898 863 864 853 0.148
1.4 910 863 865 853 0.149
1.41 900 863 875 853 0.150
1.42 891 863 884 853 0.152
1.43 890 863 887 853 0.153
1.44 888 863 894 853 0.154
1.45 880 858 902 858 0.156
1.46 881 866 905 865 0.158
1.47 878 870 908 871 0.159
1.48 882 882 910 875 0.161
1.49 881 888 913 881 0.162
1.5 877 890 917 889 0.164
1.51 874 894 920 895 0.166
1.52 871 898 923 901 0.167
1.53 877 912 925 905 0.169
1.54 876 918 928 911 0.170
1.55 872 920 932 919 0.172
1.56 869 924 935 925 0.174
1.57 866 928 938 931 0.175
1.58 862 930 942 939 0.177
1.59 861 936 945 945 0.179
1.6 858 940 948 951 0.181
1.61 855 944 951 957 0.182
1.62 854 950 954 963 0.184
1.63 853 956 957 969 0.186
1.64 854 964 960 975 0.188
1.65 853 970 963 981 0.191
1.66 854 978 966 987 0.192
1.67 856 988 968 991 0.194
1.68 859 998 971 997 0.196
1.69 865 1012 973 1001 0.197
1.7 869 1024 975 1005 0.199
1.71 868 1030 978 1011 0.201
1.72 872 1042 980 1015 0.202
1.73 873 1050 983 1021 0.204
1.74 874 1058 986 1027 0.206
1.75 876 1068 988 1031 0.208
1.76 870 1063 995 1042 0.210
1.77 882 1078 995 1042 0.212
1.78 882 1078 995 1042 0.213
1.79 880 1075 997 1046 0.215
1.8 887 1082 1003 1055 0.217
1.81 905 1105 1004 1058 0.218
1.82 907 1109 1005 1059 0.221
1.83 908 1112 1005 1059 0.223
1.84 916 1118 1005 1059 0.225
1.85 930 1128 1006 1061 0.226
1.86 929 1128 1007 1061 0.228
1.87 927 1128 1009 1061 0.230
1.88 926 1126 1011 1062 0.231
1.89 921 1121 1016 1067 0.233
1.9 912 1107 1025 1081 0.234
1.91 902 1085 1035 1101 0.238
1.92 892 1063 1045 1121 0.241
1.93 882 1042 1055 1141 0.243
1.94 872 1020 1065 1161 0.245
1.95 873 1022 1068 1167 0.248
1.96 870 1024 1073 1173 0.251
1.97 872 1034 1075 1176 0.253
1.98 873 1042 1078 1179 0.255
1.99 867 1039 1085 1189 0.257
2.0 857 1025 1095 1202 0.260
2.01 847 1005 1105 1219 0.263
2.02 862 1005 1105 1219 0.264
2.03 853 1005 1114 1219 0.266
2.04 843 1005 1124 1219 0.267
2.05 857 1005 1125 1219 0.269
2.06 849 1005 1133 1219 0.270
2.07 839 1005 1143 1219 0.271
2.08 836 1005 1147 1219 0.273
2.09 830 1005 1154 1219 0.274
2.1 832 1005 1159 1219 0.276
2.11 844 1005 1160 1219 0.277
2.12 834 1005 1170 1219 0.278
2.13 826 1005 1179 1219 0.280
2.14 840 1005 1179 1219 0.281
2.15 830 995 1189 1219 0.283
2.16 820 985 1199 1219 0.284
2.17 820 985 1201 1219 0.286
2.18 818 985 1208 1219 0.287
2.19 812 986 1214 1219 0.289
2.2 810 986 1218 1219 0.290
2.21 808 986 1225 1219 0.292
2.22 805 986 1229 1219 0.293
2.23 800 986 1235 1219 0.295
2.24 798 986 1242 1219 0.297
2.25 795 986 1245 1221 0.299
2.26 787 986 1253 1224 0.301
2.27 786 986 1256 1224 0.303
2.28 784 986 1263 1224 0.304
2.29 780 986 1268 1224 0.306
2.3 776 986 1273 1224 0.308
2.31 774 986 1280 1224 0.310
2.32 770 986 1284 1224 0.311
2.33 762 984 1292 1225 0.313
2.34 756 977 1298 1233 0.317
2.35 746 952 1308 1243 0.319
2.36 741 948 1313 1250 0.322
2.37 734 937 1320 1259 0.324
2.38 724 912 1330 1269 0.326
2.39 714 887 1340 1279 0.327
2.4 710 888 1344 1286 0.329
2.41 704 881 1350 1294 0.332
2.42 694 856 1360 1304 0.333
2.43 684 831 1370 1314 0.335
2.44 674 806 1380 1324 0.336
2.45 666 791 1388 1333 0.338
2.46 656 766 1398 1343 0.341
2.47 647 744 1407 1352 0.343
2.48 638 726 1416 1362 0.345
2.49 634 727 1420 1369 0.347
2.5 626 710 1428 1378 0.349
2.51 619 698 1435 1386 0.351
2.52 613 691 1441 1394 0.352
2.53 606 681 1448 1403 0.354
2.54 601 678 1453 1410 0.357
2.55 596 676 1458 1418 0.359
2.56 592 676 1462 1424 0.362
2.57 584 663 1470 1434 0.363
2.58 577 650 1477 1442 0.365
2.59 572 648 1482 1450 0.367
2.6 566 642 1488 1458 0.369
2.61 559 630 1495 1466 0.371
2.62 553 624 1501 1474 0.373
2.63 546 612 1508 1482 0.376
2.64 544 618 1510 1486 0.378
2.65 541 616 1513 1490 0.380
2.66 541 616 1513 1490 0.381
2.67 541 616 1513 1490 0.382
2.68 558 638 1516 1494 0.384
2.69 554 635 1521 1501 0.386
2.7 566 651 1521 1501 0.388
2.71 568 656 1522 1502 0.391
2.72 562 651 1528 1509 0.394
2.73 557 646 1533 1514 0.395
2.74 555 646 1535 1517 0.397
2.75 557 644 1537 1520 0.399
2.76 557 644 1537 1520 0.400
2.77 565 644 1537 1520 0.402
2.78 567 644 1537 1520 0.404
2.79 565 644 1539 1522 0.405
2.8 560 644 1544 1524 0.407
2.81 551 635 1553 1534 0.409
2.82 541 616 1563 1552 0.412
2.83 531 597 1573 1569 0.414
2.84 521 581 1583 1585 0.417
2.85 511 562 1593 1602 0.419
2.86 503 546 1601 1614 0.421
2.87 501 546 1605 1614 0.423
2.88 499 546 1612 1614 0.425
2.89 496 546 1616 1614 0.427
2.9 491 546 1622 1614 0.429
2.91 489 546 1629 1614 0.431
2.92 486 546 1632 1614 0.432
2.93 478 546 1640 1614 0.434
2.94 477 546 1643 1614 0.436
2.95 475 546 1650 1614 0.438
2.96 471 545 1655 1614 0.439
2.97 467 545 1660 1614 0.442
2.98 465 536 1667 1614 0.444
2.99 461 536 1671 1614 0.446
3.0 454 537 1678 1614 0.447
3.01 450 537 1682 1614 0.449
3.02 442 537 1690 1614 0.451
3.03 439 537 1693 1614 0.453
3.04 432 537 1700 1614 0.454
3.05 426 537 1706 1616 0.457
3.06 422 537 1710 1616 0.459
3.07 415 537 1717 1616 0.461
3.08 411 537 1721 1616 0.463
3.09 405 537 1727 1616 0.465
3.1 396 516 1736 1624 0.467
3.11 386 490 1746 1634 0.468
3.12 376 461 1756 1644 0.470
3.13 366 433 1766 1654 0.473
3.14 356 405 1776 1664 0.475
3.15 346 378 1786 1674 0.478
3.16 336 350 1796 1684 0.480
3.17 326 321 1806 1694 0.482
3.18 322 308 1810 1698 0.485
3.19 318 300 1814 1707 0.488
3.2 308 280 1824 1727 0.490
3.21 298 260 1834 1747 0.492
3.22 289 250 1843 1758 0.494
3.23 288 250 1844 1759 0.496
3.24 288 250 1844 1759 0.499
3.25 287 249 1845 1760 0.500
3.26 290 253 1845 1760 0.503
3.27 293 258 1845 1760 0.505
3.28 293 258 1845 1760 0.507
3.29 288 252 1850 1767 0.509
3.3 281 239 1857 1778 0.510
3.31 279 239 1859 1780 0.512
3.32 272 233 1866 1788 0.513
3.33 271 233 1867 1789 0.515
3.34 269 233 1869 1790 0.517
3.35 265 229 1873 1794 0.518
3.36 257 218 1881 1801 0.520
3.37 252 216 1886 1802 0.522
3.38 245 216 1893 1802 0.523
3.39 241 216 1897 1802 0.525
3.4 234 216 1904 1802 0.527
3.41 228 216 1910 1802 0.528
3.42 225 216 1913 1802 0.530
3.43 217 214 1921 1802 0.532
3.44 213 210 1925 1802 0.533
3.45 208 207 1930 1802 0.536
3.46 204 208 1934 1802 0.537
3.47 200 208 1938 1802 0.540
3.48 194 208 1944 1808 0.543
3.49 189 208 1949 1808 0.546
3.5 184 208 1954 1808 0.548
3.51 183 200 1955 1810 0.549
3.52 182 199 1956 1812 0.551
3.53 179 195 1959 1818 0.552
3.54 172 183 1966 1830 0.554
3.55 172 183 1966 1830 0.556
3.56 171 182 1967 1832 0.559
3.57 169 180 1969 1835 0.561
3.58 162 168 1976 1844 0.563
3.59 156 166 1982 1850 0.566
3.6 154 166 1984 1850 0.567
3.61 145 165 1993 1859 0.569
3.62 140 164 1998 1860 0.571
3.63 137 164 2001 1860 0.572
3.64 130 164 2008 1860 0.574
3.65 126 163 2012 1860 0.576
3.66 119 163 2019 1860 0.578
3.67 109 163 2029 1860 0.580
3.68 99 163 2039 1860 0.582
3.69 89 141 2049 1882 0.583
3.7 80 123 2058 1895 0.585
3.71 70 109 2068 1909 0.587
3.72 62 99 2076 1918 0.588
3.73 58 94 2080 1924 0.590
3.74 49 92 2089 1933 0.591
3.75 39 74 2099 1935 0.593
3.76 29 60 2109 1935 0.594
3.77 19 60 2119 1935 0.596
3.78 10 38 2128 1937 0.598
3.79 1 14 2137 1949 0.600
3.8 1 24 2137 1949 0.602'''

results = [i.split(" ")for i in a.split("\n")]
durchlaeufe = []
stackPaths = []
returnPaths = []
times = []
for i in results:
    durchlaeufe.append((float(i[0])*1000))
    stackPaths.append(int(i[1]))
    returnPaths.append(int(i[3]))
    times.append(float("{:.4f}".format(float(i[5]))))
# print(durchlaeufe)
# print(stackPaths)
# print(returnPaths)
# print(times)







colorBlind =  ['#377eb8', '#ff7f00', '#4daf4a', '#f781bf', '#a65628', '#984ea3', '#999999', '#e41a1c', '#dede00']

fig, ax1 = plt.subplots()

plt.grid(True)

lns3 = ax1.plot(durchlaeufe,stackPaths, ':',label='Pfade in Liste',color=colorBlind[0])

lns1 = ax1.plot(durchlaeufe,returnPaths, '--',label='Gefundene Pfade',color=colorBlind[0])

ax1.set_xlabel('Anzahl der Schleifendurchläufe')
ax1.set_ylabel('Anzahl der Pfade',color=colorBlind[0])

ax1.tick_params(axis='y', labelcolor=colorBlind[0])



ax2 = ax1.twinx()
# ax2.grid(True)
lns2 = ax2.plot(durchlaeufe,times, '--',label='Laufzeit',color=colorBlind[7])
ax2.set_ylabel('Laufzeit in Sekunden ',color=colorBlind[7])
ax2.tick_params(axis='y', labelcolor=colorBlind[7])

scale_x = 1000000


ax1.yaxis.set_major_locator(MaxNLocator(8)) 
ax2.yaxis.set_major_locator(MaxNLocator(8)) 
ax2.set_ylim([-0.0348, 0.748])


leg = lns1 +lns3+ lns2
labs = [l.get_label() for l in leg]
ax1.legend(leg, labs, loc=2)

plt.title('Pfadberechnung mit blockierte Knoten')


l = ax1.get_ylim()
l2 = ax2.get_ylim()
print(l)
print(l2)
# f = lambda x : l2[0]+(x-l[0])/(l[1]-l[0])*(l2[1]-l2[0])
# ticks = f(ax1.get_yticks())
# ax2.yaxis.set_major_locator(matplotlib.ticker.FixedLocator(ticks))

fig.tight_layout()  # otherwise the right y-label is slightly clipped
plt.show()
#plt.savefig("D:\\Downloads\\\OPC UA\\plots\\mitBlockierte.pdf",bbox_inches='tight')
#plt.savefig("D:\\Downloads\\\OPC UA\\plots\\mitBlockierte.png",bbox_inches='tight', dpi=300)


